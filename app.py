# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pPbxylj233p_KCp0b8wXPNG5yDEg2keg
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import altair as alt
import numpy as np
import plotly.express as px
from sklearn.linear_model import LinearRegression
from sklearn.cluster import KMeans


df = pd.read_csv('streamlit_dataset.csv')

st.set_page_config(
    page_title="–ï–∫–æ–Ω–æ–º—ñ—á–Ω–∏–π –¥–∞—à–±–æ—Ä–¥",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded",
    menu_items={
        'Get Help': 'https://docs.streamlit.io/',
        'Report a bug': 'https://github.com/streamlit/streamlit/issues',
        'About': '–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞ –ø–∞–Ω–µ–ª—å –¥–ª—è –µ–∫–æ–Ω–æ–º—ñ—á–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤'
    }
)

# –ë—ñ—á–Ω–∞ –ø–∞–Ω–µ–ª—å / SIDEBAR
st.sidebar.title("–ü–∞–Ω–µ–ª—å —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó")

# –§—ñ–ª—å—Ç—Ä–∏ 
selected_year = st.sidebar.selectbox("–†—ñ–∫", sorted(df["Year"].unique()))
selected_region = st.sidebar.multiselect("–†–µ–≥—ñ–æ–Ω", df["Region"].unique(), default=df["Region"].unique())
selected_industry = st.sidebar.multiselect("–ì–∞–ª—É–∑—å", df["Industry"].unique(), default=df["Industry"].unique())
selected_scenario = st.sidebar.radio("–°—Ü–µ–Ω–∞—Ä—ñ–π", df["Scenario"].unique())

selected_max_adbudget = st.sidebar.slider(
    "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–µ–∫–ª–∞–º–Ω–∏–π –±—é–¥–∂–µ—Ç",
    min_value=int(df["AdBudget"].min()),
    max_value=int(df["AdBudget"].max()),
    value=int(df["AdBudget"].max()),
    step=1000
)
# –ß–µ–∫–±–æ–∫—Å–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
show_map = st.sidebar.checkbox("–ü–æ–∫–∞–∑–∞—Ç–∏ –∫–∞—Ä—Ç—É –∫–æ–º–ø–∞–Ω—ñ–π")

# –ü–µ—Ä–µ–º–∏–∫–∞—á –≥—Ä–∞—Ñ—ñ–∫—ñ–≤
chart_option = st.sidebar.radio(
    "üìà –û–±–µ—Ä—ñ—Ç—å –≥—Ä–∞—Ñ—ñ–∫ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É:",
    # --- –ë–ª–æ–∫ —Ä–µ–≥—Ä–µ—Å—ñ—ó ---
st.sidebar.markdown("–ü–æ–±—É–¥–æ–≤–∞ —Ä–µ–≥—Ä–µ—Å—ñ—ó")
numeric_columns = df_filtered.select_dtypes(include=np.number).columns.tolist()
reg_x = st.sidebar.selectbox("–û–±–µ—Ä—ñ—Ç—å –∑–º—ñ–Ω–Ω—É X", numeric_columns, index=0)
reg_y = st.sidebar.selectbox("–û–±–µ—Ä—ñ—Ç—å –∑–º—ñ–Ω–Ω—É Y", numeric_columns, index=1)
show_regression = st.sidebar.checkbox("–ü–æ–∫–∞–∑–∞—Ç–∏ —Ä–µ–≥—Ä–µ—Å—ñ–π–Ω—É –º–æ–¥–µ–ª—å")
    [
        "–î–æ—Ö–æ–¥–∏ –Ω–∞ –∫–ª—ñ—î–Ω—Ç–∞ vs –í–∏—Ç—Ä–∞—Ç–∏",
        "Boxplot –ø—Ä–∏–±—É—Ç–∫—É –ø–æ –≥–∞–ª—É–∑—è—Ö",
        "Scatter: –ü—Ä–∏–±—É—Ç–æ–∫ vs –Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó",
        "–ì—ñ—Å—Ç–æ–≥—Ä–∞–º–∞ –∫–æ–Ω–≤–µ—Ä—Å—ñ—ó –ø–æ –≥–∞–ª—É–∑—è—Ö",
        "–¢–µ–ø–ª–æ–≤–∞ –∫–∞—Ä—Ç–∞ –∫–æ—Ä–µ–ª—è—Ü—ñ–π",
        "–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü—ñ—è –∫–æ–º–ø–∞–Ω—ñ–π (KMeans)"
    ]
)


# –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∏–π –±–ª–æ–∫
st.sidebar.markdown("---")
st.sidebar.markdown(" **–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è**: \n–§—ñ–ª—å—Ç—Ä—É–π—Ç–µ –¥–∞–Ω—ñ –∑–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —ñ –ø–µ—Ä–µ–≥–ª—è–¥–∞–π—Ç–µ –≥—Ä–∞—Ñ—ñ–∫–∏ —Ç–∞ —Ç–∞–±–ª–∏—Ü—ñ –Ω–∞ –ø–∞–Ω–µ–ª—ñ –ø—Ä–∞–≤–æ—Ä—É—á.")
st.sidebar.markdown(" **–ê–≤—Ç–æ—Ä**: Lazar_Iryna")

# ---------------------------------
# –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è
# ---------------------------------
df_filtered = df[
    (df["Year"] == selected_year) &
    (df["Region"].isin(selected_region)) &
    (df["Industry"].isin(selected_industry)) &
    (df["Scenario"] == selected_scenario) &
    (df["AdBudget"] <= selected_max_adbudget)
]


# ---------------------------------
# –û—Å–Ω–æ–≤–Ω–∞ –ø–∞–Ω–µ–ª—å
# ---------------------------------

st.title("üìä –ï–∫–æ–Ω–æ–º—ñ—á–Ω–∏–π –¥–∞—à–±–æ—Ä–¥ –∫–æ–º–ø–∞–Ω—ñ–π")
st.subheader(f"üîç –í—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {df_filtered.shape[0]} –∫–æ–º–ø–∞–Ω—ñ–π")

# –ö–Ω–æ–ø–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è CSV
csv = df_filtered.to_csv(index=False).encode("utf-8")
st.download_button(
    label="‚¨áÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ CSV",
    data=csv,
    file_name="filtered_companies.csv",
    mime="text/csv"
)


# üìà–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞ —Ç–∞–±–ª–∏—Ü—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
st.subheader("–û–±–µ—Ä—ñ—Ç—å, —è–∫—ñ —Å—Ç–æ–≤–ø—Ü—ñ —Ç–∞–±–ª–∏—Ü—ñ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏")

all_columns = df_filtered.columns.tolist()
default_columns = ["Company", "Region", "Industry", "Profit", "ROI"]

selected_columns = st.multiselect(
    "–û–±–µ—Ä—ñ—Ç—å —Å—Ç–æ–≤–ø—Ü—ñ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É",
    options=all_columns,
    default=[col for col in default_columns if col in all_columns]
)

if selected_columns:
    st.dataframe(df_filtered[selected_columns])
else:
    st.info("–û–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–∏–Ω —Å—Ç–æ–≤–ø–µ—Ü—å, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Ç–∞–±–ª–∏—Ü—é.")


# –ö–∞—Ä—Ç–∞ –∫–æ–º–ø–∞–Ω—ñ–π
if show_map:
    st.subheader("üó∫ –ì–µ–æ–≥—Ä–∞—Ñ—ñ—è –∫–æ–º–ø–∞–Ω—ñ–π")

    map_data = df_filtered[["Latitude", "Longitude"]].dropna().rename(
        columns={"Latitude": "latitude", "Longitude": "longitude"}
    )

    if not map_data.empty:
        st.map(map_data)
    else:
        st.warning("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –∫–∞—Ä—Ç–∏.")



# --- –ü–æ–±—É–¥–æ–≤–∞ —Ä–µ–≥—Ä–µ—Å—ñ–π–Ω–æ—ó –º–æ–¥–µ–ª—ñ ---
if show_regression:
    st.subheader(f"üìà –õ—ñ–Ω—ñ–π–Ω–∞ —Ä–µ–≥—Ä–µ—Å—ñ—è: {reg_y} ~ {reg_x}")

    df_reg = df_filtered[[reg_x, reg_y]].dropna()

    if df_reg.shape[0] >= 2:
        model = LinearRegression()
        model.fit(df_reg[[reg_x]], df_reg[reg_y])
        y_pred = model.predict(df_reg[[reg_x]])

        coef = model.coef_[0]
        intercept = model.intercept_
        r2 = model.score(df_reg[[reg_x]], df_reg[reg_y])

        st.markdown(f"**–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –Ω–∞—Ö–∏–ª—É (Œ≤):** {coef:.4f}")
        st.markdown(f"**–ó—Å—É–≤ (intercept):** {intercept:.4f}")
        st.markdown(f"**R¬≤:** {r2:.4f}")

        fig, ax = plt.subplots(figsize=(8, 5))
        sns.scatterplot(data=df_reg, x=reg_x, y=reg_y, ax=ax)
        sns.lineplot(x=df_reg[reg_x], y=y_pred, color='red', ax=ax)
        ax.set_title(f"–†–µ–≥—Ä–µ—Å—ñ—è {reg_y} ~ {reg_x}")
        st.pyplot(fig)
    else:
        st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ —Ä–µ–≥—Ä–µ—Å—ñ—ó.")
# –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –æ–±—Ä–∞–Ω–æ–≥–æ –≥—Ä–∞—Ñ—ñ–∫–∞     
if chart_option == "–î–æ—Ö–æ–¥–∏ –Ω–∞ –∫–ª—ñ—î–Ω—Ç–∞ vs –í–∏—Ç—Ä–∞—Ç–∏":
    st.subheader("üìä –î–æ—Ö–æ–¥–∏ –Ω–∞ –∫–ª—ñ—î–Ω—Ç–∞ vs –í–∏—Ç—Ä–∞—Ç–∏")
    chart = alt.Chart(df_filtered).mark_circle(size=60).encode(
        x='Expenses:Q',
        y='RevenuePerCustomer:Q',
        color='Industry:N',
        tooltip=['Company', 'Expenses', 'RevenuePerCustomer', 'Industry']
    ).interactive().properties(title="–î–æ—Ö—ñ–¥ –Ω–∞ –∫–ª—ñ—î–Ω—Ç–∞ vs –í–∏—Ç—Ä–∞—Ç–∏")
    st.altair_chart(chart, use_container_width=True)

elif chart_option == "Boxplot –ø—Ä–∏–±—É—Ç–∫—É –ø–æ –≥–∞–ª—É–∑—è—Ö":
    st.subheader("üìä Boxplot –ø—Ä–∏–±—É—Ç–∫—É –ø–æ –≥–∞–ª—É–∑—è—Ö")
    fig, ax = plt.subplots(figsize=(10, 5))
    sns.boxplot(data=df_filtered, x="Industry", y="Profit", ax=ax)
    ax.set_title("–†–æ–∑–ø–æ–¥—ñ–ª –ø—Ä–∏–±—É—Ç–∫—É –ø–æ –≥–∞–ª—É–∑—è—Ö")
    st.pyplot(fig)

elif chart_option == "Scatter: –ü—Ä–∏–±—É—Ç–æ–∫ vs –Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó":
    st.subheader("üìä Scatter: –ü—Ä–∏–±—É—Ç–æ–∫ vs –Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó")
    chart = alt.Chart(df_filtered).mark_circle(size=60).encode(
        x='Investment:Q',
        y='Profit:Q',
        color='Industry:N',
        tooltip=['Company', 'Investment', 'Profit']
    ).interactive().properties(title="–ü—Ä–∏–±—É—Ç–æ–∫ vs –Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó")
    st.altair_chart(chart, use_container_width=True)

elif chart_option == "–ì—ñ—Å—Ç–æ–≥—Ä–∞–º–∞ –∫–æ–Ω–≤–µ—Ä—Å—ñ—ó –ø–æ –≥–∞–ª—É–∑—è—Ö":
    st.subheader("üìä –ì—ñ—Å—Ç–æ–≥—Ä–∞–º–∞ –∫–æ–Ω–≤–µ—Ä—Å—ñ—ó –ø–æ –≥–∞–ª—É–∑—è—Ö")
    fig, ax = plt.subplots(figsize=(10, 5))
    sns.barplot(data=df_filtered, x="Industry", y="ConversionRate", estimator="mean", ax=ax)
    ax.set_title("–°–µ—Ä–µ–¥–Ω—ñ–π Conversion Rate –ø–æ –≥–∞–ª—É–∑—è—Ö")
    st.pyplot(fig)

elif chart_option == "–¢–µ–ø–ª–æ–≤–∞ –∫–∞—Ä—Ç–∞ –∫–æ—Ä–µ–ª—è—Ü—ñ–π":
    st.subheader("üìä –¢–µ–ø–ª–æ–≤–∞ –∫–∞—Ä—Ç–∞ –∫–æ—Ä–µ–ª—è—Ü—ñ–π")
    numeric_cols = df_filtered.select_dtypes(include=[np.number])
    corr = numeric_cols.corr()
    fig, ax = plt.subplots(figsize=(10, 6))
    sns.heatmap(corr, annot=True, cmap='coolwarm', fmt=".2f", ax=ax)
    ax.set_title("–ö–æ—Ä–µ–ª—è—Ü—ñ–π–Ω–∞ –º–∞—Ç—Ä–∏—Ü—è —á–∏—Å–ª–æ–≤–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤")
    st.pyplot(fig)

elif chart_option == "–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü—ñ—è –∫–æ–º–ø–∞–Ω—ñ–π (KMeans)":
    st.subheader("üìä –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü—ñ—è –∫–æ–º–ø–∞–Ω—ñ–π –Ω–∞ –æ—Å–Ω–æ–≤—ñ ROI —Ç–∞ Investment")
    cluster_data = df_filtered[["ROI", "Investment"]].dropna()
    if cluster_data.shape[0] >= 3:
        kmeans = KMeans(n_clusters=3, random_state=0)
        cluster_data["Cluster"] = kmeans.fit_predict(cluster_data)

        chart = alt.Chart(cluster_data).mark_circle(size=60).encode(
            x='Investment',
            y='ROI',
            color='Cluster:N',
            tooltip=['ROI', 'Investment', 'Cluster']
        ).interactive().properties(title="–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü—ñ—è –∑–∞ ROI —Ç–∞ Investment")
        st.altair_chart(chart, use_container_width=True)
    else:
        st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü—ñ—ó (–ø–æ—Ç—Ä—ñ–±–Ω–æ ‚â• 3 —Ä—è–¥–∫–∏).")
elif show_regression:
    st.subheader(f"üìà –õ—ñ–Ω—ñ–π–Ω–∞ —Ä–µ–≥—Ä–µ—Å—ñ—è: {reg_y} ~ {reg_x}")

    X = df_filtered[[reg_x]].dropna()
    y = df_filtered[reg_y].dropna()

    # –í–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è –ø–æ —ñ–Ω–¥–µ–∫—Å—É
    df_reg = df_filtered[[reg_x, reg_y]].dropna()

    if df_reg.shape[0] >= 2:
        model = LinearRegression()
        model.fit(df_reg[[reg_x]], df_reg[reg_y])
        y_pred = model.predict(df_reg[[reg_x]])

        coef = model.coef_[0]
        intercept = model.intercept_
        r2 = model.score(df_reg[[reg_x]], df_reg[reg_y])

        st.markdown(f"**–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –Ω–∞—Ö–∏–ª—É (Œ≤):** {coef:.4f}")
        st.markdown(f"**–ó—Å—É–≤ (intercept):** {intercept:.4f}")
        st.markdown(f"**R¬≤:** {r2:.4f}")

        # –ü–æ–±—É–¥–æ–≤–∞ –≥—Ä–∞—Ñ—ñ–∫–∞
        fig, ax = plt.subplots(figsize=(8, 5))
        sns.scatterplot(data=df_reg, x=reg_x, y=reg_y, ax=ax)
        sns.lineplot(x=df_reg[reg_x], y=y_pred, color='red', ax=ax)
        ax.set_title(f"–†–µ–≥—Ä–µ—Å—ñ—è {reg_y} ~ {reg_x}")
        st.pyplot(fig)
    else:
        st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ —Ä–µ–≥—Ä–µ—Å—ñ—ó.")

